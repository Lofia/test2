}
f=function(nouse=NA,n=150,err0=0.00001,c=0.3,dist){ # function to generate test statistic for null/alternative
cat(info,', n=',n,', c=',c,sep='')
an=c*sqrt(n) # an=alpha*n, i.e., alpha=c/sqrt(n)=beta
beta=c/sqrt(n)
x=c(sort(dist(n)),1) # x[0]=0, x[n+1]=1 ###
result=pmle3(x,n,err0,an,beta) # estimate index[i] = n1+n2+n3+...+n_i, omegas[k]=omega_hat_k, iout=m
omegas=result[[1]];index=result[[2]];iout=result[[3]]
p=an*log(omegas[1])-beta*n*(omegas[iout]-1) # penalty term
rt=index[1]*log(omegas[1]) # non-penalty term
if(iout>1) for(i in 2:iout) rt=rt+(index[i]-index[i-1])*log(omegas[i])
return(p+rt)
}
f2=function(x,err0=0.00001,c=0.3){ # function to compute test statistic for input sample
n=length(x)
x=c(x,1)
an=c*sqrt(n) # an=alpha*n, i.e., alpha=c/sqrt(n)=beta
beta=c/sqrt(n)
result=pmle3(x,n,err0,an,beta) # estimate index[i] = n1+n2+n3+...+n_i, omegas[k]=omega_hat_k, iout=m
omegas=result[[1]];index=result[[2]];iout=result[[3]]
p=an*log(omegas[1])-beta*n*(omegas[iout]-1) # penalty term
rt=index[1]*log(omegas[1]) # non-penalty term
if(iout>1) for(i in 2:iout) rt=rt+(index[i]-index[i-1])*log(omegas[i])
return(p+rt)
}
g=function(N,C){ # function to compute critical values (1000 simulations for each setting)
pboptions(nout=1000) # number of independent trials
M=matrix(nrow=length(N),ncol=length(C))
#cat('Computing critical value using the null distribution:\n')
for(i in 1:length(N)){
for(j in 1:length(C)){
M[i,j]=as.numeric(quantile(pbsapply(1:1000,f,n=N[i],c=C[j],dist=null_sample),1-alpha))
}
}
rownames(M)=N
colnames(M)=C
#cat('critical values:\n')
#print(M)
return(M)
}
critic=g(N=length(x),C=0.3)[1,1]
lambda=f2(x)
if(lambda>critic) print(paste('Since lambda = ',round(lambda,3),' > ',round(critic,3)
,' = critical value ,we reject the null (no bias) hypothesis.',sep=''))
else print(paste('Since lambda = ',lambda,' < ',critic
,',we reject the null (no bias) hypothesis.',sep=''))
}
test1(seq(0.1,0.9,0.01),alpha=0.05)
test1(rep(0.5,100),alpha=0.05)
test1(seq(0,1,0.01),alpha=0.05)
test1=function(x,alpha=0.05){
if(!require("pbapply")) install.packages("pbapply")
library(pbapply)
op=pboptions(type="timer")
Fx=function(x){return(x)}
info='null=U[0,1]'
null_sample=function(n){return(runif(n))}
gamma3=function(x,err0,an,beta,n){ # use (4) to obtain omega_n_hat, and consequently estimate gamma
g1=1;g=Inf
while(abs(g1-g)>err0){
g=g1
omega_n_s=rep(NA,n)
omega_n_s[1]=(n+an)/(g*(1-Fx(x[1]))+beta) # H0: uniform dist F(x[1])
omega_n_s[2:n]=sapply(2:n,function(i){return((n-i+1)/(g*(1-Fx(x[i]))+beta))}) # i changes
omega_n=max(omega_n_s)/n
g1=1+an/n-beta*omega_n
}
return(g1)
}
est3=function(x,g,an,beta,i,n){ # estimate each omega
outs=rep(NA,n-i+1)
if(i>1) an=0 # no need to add an
if(i==n) return(list(i0=n,out=(n-i+1+an)/(g*(1-Fx(x[i]))+beta)/n))
outs[1:(n-i)]=sapply(i:(n-1),function(j){return((j-i+1+an)/(g*(Fx(x[j+1])-Fx(x[i]))))}) # j changes
outs[n-i+1]=(n-i+1+an)/(g*(1-Fx(x[i]))+beta)
outn=min(outs)
i0=which(outs==outn)+i-1 # i0 is the index of n1+n2+n3+...+n_i
## Note: the reason of returning i0 is that: if i<k<j reaches the max(min(.)) for k,
## then this couple of (i,j) also reaches the max(min(.)) for any k<=j. (The property of the greatest convex minorant.)
## That's why we use i0 to record the position of the j reaching max(min(.)) for k.
return(list(i0=i0,out=outn/n)) # out is the estimated omega_k
}
pmle3=function(x,n,err0,an,beta){ # estimate each omega_hats
omegas=index=vector()
g=gamma3(x,err0,an,beta,n) # estimate gamma
iout=0;i=1;sum=0
while(i<=n){
iout=iout+1
result=est3(x,g,an,beta,i,n) # estimate omegas[k]=omega_k and index i0
i0=result[[1]];omegas[iout]=result[[2]]
sum=sum+omegas[iout]*(Fx(x[i0+1])-Fx(x[i])) # measure the appropriation of our estimation
index[iout]=i0 # index[i] = n1+n2+n3+...+n_i
i=i0+1 # continue with the next group
#cat('omegas:',omegas,'index:',index,'i0:',i0,'i:',i,'iout:',iout,'\n')
}
if(abs(1-sum)>1e-4) warning("1 =/= sum =",sum)
return(list(omegas=omegas,index=index,iout=iout))
}
f=function(nouse=NA,n=150,err0=0.00001,c=0.3,dist){ # function to generate test statistic for null/alternative
cat(info,', n=',n,', c=',c,sep='')
an=c*sqrt(n) # an=alpha*n, i.e., alpha=c/sqrt(n)=beta
beta=c/sqrt(n)
x=c(sort(dist(n)),1) # x[0]=0, x[n+1]=1 ###
result=pmle3(x,n,err0,an,beta) # estimate index[i] = n1+n2+n3+...+n_i, omegas[k]=omega_hat_k, iout=m
omegas=result[[1]];index=result[[2]];iout=result[[3]]
p=an*log(omegas[1])-beta*n*(omegas[iout]-1) # penalty term
rt=index[1]*log(omegas[1]) # non-penalty term
if(iout>1) for(i in 2:iout) rt=rt+(index[i]-index[i-1])*log(omegas[i])
return(p+rt)
}
f2=function(x,err0=0.00001,c=0.3){ # function to compute test statistic for input sample
n=length(x)
x=c(x,1)
an=c*sqrt(n) # an=alpha*n, i.e., alpha=c/sqrt(n)=beta
beta=c/sqrt(n)
result=pmle3(x,n,err0,an,beta) # estimate index[i] = n1+n2+n3+...+n_i, omegas[k]=omega_hat_k, iout=m
omegas=result[[1]];index=result[[2]];iout=result[[3]]
p=an*log(omegas[1])-beta*n*(omegas[iout]-1) # penalty term
rt=index[1]*log(omegas[1]) # non-penalty term
if(iout>1) for(i in 2:iout) rt=rt+(index[i]-index[i-1])*log(omegas[i])
return(p+rt)
}
g=function(N,C){ # function to compute critical values (1000 simulations for each setting)
pboptions(nout=1000) # number of independent trials
M=matrix(nrow=length(N),ncol=length(C))
#cat('Computing critical value using the null distribution:\n')
for(i in 1:length(N)){
for(j in 1:length(C)){
M[i,j]=as.numeric(quantile(pbsapply(1:1000,f,n=N[i],c=C[j],dist=null_sample),1-alpha))
}
}
rownames(M)=N
colnames(M)=C
#cat('critical values:\n')
#print(M)
return(M)
}
critic=g(N=length(x),C=0.3)[1,1]
lambda=f2(x)
if(lambda>critic) print(paste('Since lambda = ',round(lambda,3),' > ',round(critic,3)
,' = critical value ,we reject the null (no bias) hypothesis.',sep=''))
else print(paste('Since lambda = ',round(lambda,3),' > ',round(critic,3)
,' = critical value ,we reject the null (no bias) hypothesis.',sep=''))
}
test1(seq(0,1,0.01),alpha=0.05)
setwd("C:/Users/Zixiang Xu/Desktop/GMU/JY Sun/selection-bias/Rpackage/test2")
usethis::use_r(test1)
usethis::use_r()
usethis::use_r(test1.R)
setwd("C:/Users/Zixiang Xu/Desktop/GMU/JY Sun/selection-bias/Rpackage/test2/R")
usethis::use_r(test1.R)
usethis::use_r()
rlang::last_trace()
devtools::document()
devtools::check()
devtools::load_all()
?test1
test1(seq(0,1,0.01),alpha=0.05)
devtools::load_all()
test1(seq(0,1,0.01),alpha=0.05)
if(1) a=3;b=4
if(0) a=3;b=4
if(!require("pbapply")){install.packages("pbapply");library(pbapply)}
if(0) {a=3;b=4}
library(test2)
?test2::test1()
library(devtools)
library(usethis)
?use_r
use_r('MM.R')
MM=function(x,y=c(),N,setting='exp',alpha=0,epsilon=0,penalty=FALSE,auto_gcm=TRUE,auto_bisection=FALSE,direct_c=TRUE){#,alpha,beta){
n=length(x);m=length(y)
x=sort(x);y=sort(y)
if(alpha>0) {auto_bisection=TRUE;N=Inf;alpha=alpha*n^{-2/3}}
if(setting=='exp'){
compute_theta0=function(x,y=c()){
x=c(x,y)
return(1/mean(x))
}
compute_theta_bounds=function(x) return(c(0,5/mean(x))) #?
compute_p=function(x,theta){
x=c(x,Inf)
return(diff(pexp(x,theta)))
}
compute_dp=function(x,theta){ #?
dF=c(x*exp(-theta*x),0)
return(dF[2:(n+1)]-dF[1:n])
}
dl_dtheta=function(x,theta,v){ # partial derivative: d(l)/d(theta) (ignoring constants, increasing)
p=compute_p(x,theta)
dp=compute_dp(x,theta)
return((N-n)/(1-sum(p*v))*sum(dp*v)-n/theta+sum(x)) ###### changeable
}
compute_llf=function(x,y,theta,v){
xy=c(x,y)
p=compute_p(x,theta)
theta0=compute_theta0(x,y)
p0=compute_p(x,theta0)
k=epsilon*(1-sum(p))+sum(p*v) #sum(p[1:(n-1)]*v[1:(n-1)])-p[n]
k0=epsilon*(1-sum(p0))+sum(p0)
cat('p',p,'\n','p0',p0,'\n','theta0',theta0,'\n','theta',theta,'\n','v',v)
if(alpha>0) return(c(llf_all=sum(log(v))+(theta-theta0)*sum(-xy)+(n+m)*log(theta/theta0)-n*log(k/k0)-alpha*n*(1/k-1/k0),
llf_v=sum(log(v)),
llf_theta=(theta-theta0)*sum(-xy)+n*log(theta/theta0),
llf_k=-n*log(k/k0),
llf_penalty=-alpha*n*(1/k-1/k0))) # unknown N case
llf_all=sum(log(v*N/n))+(theta-theta0)*sum(-x)+n*log(theta/theta0)+(N-n)*log((1-sum(p*v))/(1-sum(p0*n/N)))
llf_1=sum(log(v*N/n))
llf_1_1=sum(log(v*N/n))-n*log(N*(1-c$c)/(N-n))
llf_1_2=n*log(N*(1-c$c)/(N-n))
llf_2=(theta-theta0)*sum(-x)
llf_3=n*log(theta/theta0)
llf_4=(N-n)*log((1-sum(p*v))/(1-sum(p0*n/N)))
return(c(llf_all=llf_all,llf_1=llf_1,llf_1_1=llf_1_1,llf_1_2=llf_1_2,llf_2=llf_2,llf_3=llf_3,llf_4=llf_4)) ###### changeable
}
}
else if(setting=='half_norm'){
compute_theta0=function(x) return(-1/2/mean(x^2)) # MLE under null
compute_theta_bounds=function(x) return(c(-5/2/mean(x^2),0))
compute_p=function(x,theta){
x=c(x,Inf)
sigma=sqrt(-0.5/theta)
Fx=pnorm(x,sd=sigma)*2-1
return(diff(Fx))
}
compute_dp=function(x,theta){
dF=-2*x*dnorm(sqrt(-2*theta)*x)/sqrt(-2*theta)
dF=c(dF,0)
return(dF[2:(n+1)]-dF[1:n])
# library(numDeriv)
# f = function(theta) 2*pnorm(sqrt(-2*theta)*x[1])-1
# grad(f,-1)
}
dl_dtheta=function(x,theta,v){ # partial derivative: d(l)/d(theta) (ignoring constants, increasing)
p=compute_p(x,theta)
dp=compute_dp(x,theta)
return((N-n)/(1-sum(p*v))*sum(dp*v)-n/theta/2-sum(x^2)) ###### changeable
}
compute_llf=function(x,theta,v){
p=compute_p(x,theta)
theta0=compute_theta0(x)
p0=compute_p(x,theta0)
llf_all=sum(log(v*N/n))+(theta-theta0)*sum(x^2)+n/2*log(theta/theta0)+(N-n)*log((1-sum(p*v))/(1-sum(p0*n/N)))
llf_1=sum(log(v*N/n))
# llf_1_1=sum(log(v*N/n))-n*log(N*(1-c$c)/(N-n))
# llf_1_2=n*log(N*(1-c$c)/(N-n))
llf_2=(theta-theta0)*sum(x^2)
llf_3=n/2*log(theta/theta0)
llf_4=(N-n)*log((1-sum(p*v))/(1-sum(p0*n/N)))
return(c(llf_all=llf_all,llf_1=llf_1,llf_2=llf_2,llf_3=llf_3,llf_4=llf_4)) ###### changeable llf_1_1=llf_1_1,llf_1_2=llf_1_2,
}
}
else if(setting=='norm'){
auto_bisection=TRUE
compute_theta0=function(x,y=c()){
x=c(x,y)
mu=mean(x)
sigma2=var(x)*(n-1)/n
return(c(-0.5/sigma2,mu/sigma2)) # MLE under null
}
# L_bound=c(-Inf,-Inf);R_bound=c(0,Inf)
compute_p=function(x,theta){
x=c(x,Inf)
mu=-theta[2]/2/theta[1]
sigma=sqrt(-0.5/theta[1])
Fx=pnorm(x,mean=mu,sd=sigma)
return(diff(Fx))
}
compute_llf=function(x,y,theta,v){
xy=c(x,y)
p=compute_p(x,theta)
theta0=compute_theta0(x,y)
p0=compute_p(x,theta0)
k=epsilon*(1-sum(p))+sum(p*v) #sum(p[1:(n-1)]*v[1:(n-1)])-p[n]
k0=epsilon*(1-sum(p0))+sum(p0)
# cat('p',p,'\n','p0',p0,'\n','theta0',theta0,'\n','theta',theta,'\n','v',v)
if(alpha>0) return(c(llf_all=sum(log(v))+(theta[1]-theta0[1])*sum(xy^2)+(theta[2]-theta0[2])*sum(xy)+(n+m)/4*(theta[2]^2/theta[1]-theta0[2]^2/theta0[1])+(n+m)/2*log(theta[1]/theta0[1])-n*log(k/k0)-alpha*n*(1/k-1/k0),
llf_v=sum(log(v)),
llf_theta=(theta[1]-theta0[1])*sum(xy^2)+(theta[2]-theta0[2])*sum(xy)+(n+m)/4*(theta[2]^2/theta[1]-theta0[2]^2/theta0[1])+(n+m)/2*log(theta[1]/theta0[1]),
llf_k=-n*log(k/k0),
llf_penalty=-alpha*n*(1/k-1/k0))) # unknown N case
llf_all=sum(log(v*N/n))+(theta[1]-theta0[1])*sum(x^2)+(theta[2]-theta0[2])*sum(x)+n/4*(theta[2]^2/theta[1]-theta0[2]^2/theta0[1])+n/2*log(theta[1]/theta0[1])+(N-n)*log((1-sum(p*v))/(1-sum(p0*n/N)))
llf_1=sum(log(v*N/n))
llf_2=(theta[1]-theta0[1])*sum(x^2)+(theta[2]-theta0[2])*sum(x)
llf_3=n/4*(theta[2]^2/theta[1]-theta0[2]^2/theta0[1])+n/2*log(theta[1]/theta0[1])
llf_4=(N-n)*log((1-sum(p*v))/(1-sum(p0*n/N)))
return(c(llf_all=llf_all,llf_1=llf_1,llf_2=llf_2,llf_3=llf_3,llf_4=llf_4))
}
}
else if(setting=='gamma'){
auto_bisection=TRUE
compute_theta0=function(x,y=c()){
x=c(x,y)
beta=mean(x)/var(x)*n/(n-1)
alpha=beta*mean(x)
return(c(alpha,beta)) # MLE under null
}
# L_bound=c(-Inf,-Inf);R_bound=c(0,Inf)
compute_p=function(x,theta){
x=c(x,Inf)
Fx=pgamma(x,theta[1],theta[2])
return(diff(Fx))
}
compute_llf=function(x,y,theta,v){
xy=c(x,y)
if(sum(theta<1e-9)) theta[theta<1e-9]=1e-9
p=compute_p(x,theta)
theta0=compute_theta0(x,y)
p0=compute_p(x,theta0)
k=epsilon*(1-sum(p))+sum(p*v) #sum(p[1:(n-1)]*v[1:(n-1)])-p[n]
k0=epsilon*(1-sum(p0))+sum(p0)
# cat('p',p,'\n','p0',p0,'\n','theta0',theta0,'\n','theta',theta,'\n','v',v)
if(alpha>0) return(llf_all=sum(log(v))+(theta[1]-theta0[1])*sum(log(xy))+(theta[2]-theta0[2])*sum(-xy)+(n+m)*(theta[1]*log(theta[2])-log(gamma(theta[1]))-theta0[1]*log(theta0[2])+log(gamma(theta0[1])))-n*log(k/k0)-alpha*n*(1/k-1/k0)) # unknown N case
llf_all=sum(log(v*N/n))+(theta[1]-theta0[1])*sum(log(x))+(theta[2]-theta0[2])*sum(-x)+n*(theta[1]*log(theta[2])-log(gamma(theta[1]))-theta0[1]*log(theta0[2])+log(gamma(theta0[1])))+(N-n)*log((1-sum(p*v))/(1-sum(p0*n/N)))
llf_1=sum(log(v*N/n))
llf_2=(theta[1]-theta0[1])*sum(log(x))+(theta[2]-theta0[2])*sum(-x)
llf_3=n*(theta[1]*log(theta[2])-log(gamma(theta[1]))-theta0[1]*log(theta0[2])+log(gamma(theta0[1])))
llf_4=(N-n)*log((1-sum(p*v))/(1-sum(p0*n/N)))
return(c(llf_all=llf_all,llf_1=llf_1,llf_2=llf_2,llf_3=llf_3,llf_4=llf_4))
}
}
####################################
####################################
# pava=function(dx,dy){
#   n=length(dx)
#   slopes=dy/dx
#   index=1:n
#   j=n
#   for(j in (n-1):1){
#     while(slopes[j+1]<slopes[j]){
#       dx[j]=dx[j+1]+dx[j];dx=dx[-(j+1)]
#       dy[j]=dy[j+1]+dy[j];dy=dy[-(j+1)]
#       slopes[(j)]=dy[j]/dx[j];slopes=slopes[-(j+1)]
#       index=index[-(j+1)]
#       if(length(index)==j) break
#     }
#   }
#   return(rep(slopes,diff(c(index,n+1))))
# }
# pava_gcmlcm=function(dx,dy){
#   u=gcmlcm(cumsum(c(0,dx)),cumsum(c(0,dy)))
#   index=diff(match(u$x.knots,cumsum(c(0,dx)))-1)
#   return(rep(u$slope.knots,index))
# }
# t1=Sys.time()
# for(i in 1:1000) a=pava_gcmlcm(runif(1000),runif(1000))
# t2=Sys.time()
# t2-t1
#
# t1=Sys.time()
# for(i in 1:1000) pava(runif(10000),runif(10000))
# t2=Sys.time()
# t2-t1
#
# t1=Sys.time()
# for(i in 1:1000) dx=runif(1000);dy=runif(1000);a=pvt.isoMean(dy/dx,dx)
# t2=Sys.time()
# t2-t1
if(auto_gcm && direct_c){
# library(fdrtool)
est=function(c,theta){ #careful with ties
a=rep(1,n)#;a[1]=a[1]+n*alpha
b=(N-n)/(1-c)*p;  b[n]=b[n]+penalty*(N-n)/(1-c)*2/sqrt(n) # penalty added
if(alpha>0) b=(c-alpha)/c^2*n*p
aa=diff(c(which(b>0),n+1)) # a without ties
bb=b[b>0] # b without ties
# u=gcmlcm(cumsum(c(0,bb)),cumsum(c(0,aa)))
# index=diff(match(u$x.knots,cumsum(c(0,bb)))-1)
# vv=rep(u$slope.knots,index)
vv=pvt.isoMean(aa/bb,bb)
v=rep(vv,aa)
v=sapply(v,min,1)
if(alpha>0) v=sapply(v,max,epsilon)
return(list(v=v))#,v_tilde=u$slope.knots,index=index)) ###### shortenable
}
}
else if(auto_gcm && !direct_c){
library(fdrtool)
est=function(c,theta){ #careful with ties
a=rep(1,n)#;a[1]=a[1]+n*alpha
b=(N-n)/(1-c)*p;  b[n]=b[n]+penalty*(N-n)/(1-c)*2/sqrt(n) # penalty added
if(alpha>0) b=(c-alpha)/c^2*n*p
aa=diff(c(which(b>0),n+1)) # a without ties
bb=b[b>0] # b without ties
u=gcmlcm(cumsum(c(0,bb)),cumsum(c(0,aa)))
index=diff(match(u$x.knots,cumsum(c(0,bb)))-1)
vv=rep(u$slope.knots,index)
# vv=pvt.isoMean(aa/bb,bb)
v=rep(vv,aa)
v=sapply(v,min,1)
if(alpha>0) v=sapply(v,max,epsilon)
return(list(v=v))#,v_tilde=u$slope.knots,index=index)) ###### shortenable
}
}
else{
est=function(c,theta){
a=rep(1,n)#;a[1]=a[1]+n*alpha
b=(N-n)/(1-c)*p;  b[n]=b[n]+penalty*(N-n)/(1-c)*2/sqrt(n) # penalty added
if(alpha>0) b=(c-alpha)/c^2*n*p
M=matrix(nrow=n,ncol=n)
for(i in 1:n) for(j in i:n) M[i,j]=sum(a[i:j])/sum(b[i:j])
v=rep(Inf,n)
v[1]=min(M[1,]);v[n]=max(M[,n])
for(k in 2:(n-1)) v[k]=max(apply(M[1:k,k:n],1,min))
# cat(sum(p*v))
# cat('\n')
v=sapply(v,min,1)
if(alpha>0) v=sapply(v,max,epsilon)
return(list(v=v,v_tilde=unique(v),index=match(unique(v),v),M=M)) ###### shortenable
}
}
bisection_c=function(left,right,theta,iter=1){ # f increasing
mid=(left+right)/2
fmid=mid-epsilon*(1-sum(p))-sum(p*est(mid,theta)$v) ###### changeable?
if(abs(left-right)<0.0001) return(list(c=mid,iter=iter,fmid=fmid))
iter=iter+1
# cat(c(left,right,mid,fmid))
# cat('\n')
if(fmid>=0) return(bisection_c(left,mid,theta,iter))
if(fmid<0) return(bisection_c(mid,right,theta,iter))
}
bisection_theta=function(left,right,v,iter=1){ # f increasing
mid=(left+right)/2
fmid=dl_dtheta(x,mid,v)
if(abs(left-right)<0.00001) return(list(theta=mid,iter=iter,fmid=fmid))
iter=iter+1
# cat(c(left,right,mid,fmid))
# cat('\n')
if(fmid>=0) return(bisection_theta(left,mid,v,iter))
if(fmid<0) return(bisection_theta(mid,right,v,iter))
}
theta0=compute_theta0(x,y)
#theta0=mean(x)/var(x) # under HA, mean=(b+1)/theta, var=(b+1)/theta^2
####################################
####################################
loop=1
repeat{
# theta0=c(0.6,0.006)
p=compute_p(x,theta0)
# cat('\n','theta0 =',theta0,'\n')
c=bisection_c(alpha+0.001,1,theta0)
h=0
while(N==Inf & h<10){
h=h+1
c2=bisection_c(c$c,1,theta0)
if(c$c-c2$c<1e-4) h=999
c=c2
}
if(h>0 & h<999) warning('c iter error')
v=est(c$c,theta0)#;v$v=rep(0.8,n)
# cat(loop,'\n',
#     'c:',c$c,c$iter,c$fmid,'\n',
#     'v:',v$v_tilde,v$index,'\n')
if(auto_bisection){
if(length(theta0)>1){
out=optim(theta0,function(u)
return(compute_llf(x,y,u,v$v)[1]),control=list(fnscale=-1),gr=NULL)
# cat('\n out')
theta=list(theta=out$par,iter=out$value,fmid=out$convergence)
}
else if(length(theta0)==1){
out=optimize(function(u)
return(compute_llf(x,y,u,v$v)[1]),c(1e-2,1e4),maximum=TRUE)
# cat('\n out')
theta=list(theta=out$maximum,iter=out$objective,fmid=NULL)
}
else stop('ERROR_AUTO_BISECTION')
}
else{
bounds=compute_theta_bounds(x)
theta=bisection_theta(bounds[1],bounds[2],v$v)
}
llf=compute_llf(x,y,theta$theta,v$v)
# cat(loop,'\n',
#     'c:',c$c,c$iter,c$fmid,'\n',
#     'v:',v$v,'\n',#'(',v$index,')',
#     'theta:',theta$theta,theta$iter,theta$fmid,'\n',
#     #'llf0:',llf0,'\n',
#     'llf:',llf,sum(p*v$v),'\n')
if(sum(abs(theta$theta-theta0))<0.001){
if(setting=='norm') {
theta=theta$theta
mu=-theta[2]/2/theta[1]
sigma=sqrt(-0.5/theta[1])
return(list(v=v$v,theta=c(mu,sigma),llf=llf,c=c$c,loop=loop))
}
return(list(v=v$v,theta=theta$theta,llf=llf,c=c$c,loop=loop))
}
#_tilde,index=v$index
theta0=theta$theta #;v0=v
loop=loop+1
}
}
use_package("fdrtool")
check()
document()
rm(list = c("MM"))
document()
check()
use_r(pvt.isoMean.R)
use_r(pvt.isoMean)
use_r('pvt.isoMean.R')
document()
check()
check()
document()
check()
build_site()
document()
build_site()
install()
?MM
